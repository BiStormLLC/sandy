#!/bin/bash
#
# Description: Initiates a conversion of a file that is moved into a profile working directory.
#  Because virtualbox and shared nfs folders don't allow for listening to write
#  changes from just the host machine, this task is run through cron
#

audio_dir="$1"

if [ ! -d "$audio_dir" ]; 
    then
     echo "Sandy: Please pass me the directory where audio profile working folders are stored."
     echo "exited with error"
     exit 1
fi

source /vagrant/bistorm/vars/log_loc

rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

for d in $audio_dir/*; do

    # Only process in the profile directory where video files are stored
    if [ ! -d "$d" ]  || [ "$(basename $d)" == "raw" ]; then
        continue
    fi

    # Get the latest file to be converted
    ## Make file extension listing easier to read
    acc_files=()
    for f in $d/*; do
        filename=`basename "$f"`
        f_lower="$(echo $filename | tr [A-Z] [a-z])"

        # Do not check files that contain the profile name
        if [[ ! -f $f ]] || [[ "$filename" == *"$(basename $d)"* ]]; then
            continue
        fi

        if [[ ${f_lower: -4} == ".mp3" ]] || [[ ${f_lower: -4} == ".ogg" ]] || [[ ${f_lower: -4} == ".wav" ]] || \
            [[ ${f_lower: -4} == ".m4a" ]] || [[ ${f_lower: -4} == ".oga" ]]; then
            acc_files+=("$filename")
        fi
    done

    # If there are no convertible files in this directory, move to the next one
    if [ -z ${acc_files[0]} ]; then
        continue 
    fi;

    for i in "${acc_files[@]}"; do    

        latest_file_base=$i
        uid=$(basename $d)

        # Generate filename before extension
        original_fn="$(echo $latest_file_base | cut -f 1 -d '.')"

        # Ensure that the file does NOT contain a LIVE timestamp
        stringcreated=$(echo $original_fn | cut -f 2 -d '-')
        datecreated=$(date --d @$stringcreated +"%D")
        val_date=$(date -d $datecreated)
        if [ ! -z "$val_date" ] || [ ! "$val_date" == "" ]; then
            echo "Sandy: $latest_file_base will NOT be converted."
            echo -e "\n Sandy: It ends in '-[UNIX_DATE]' format, which I assume is a LIVE file."
            echo -e "\n Sandy: Please rename the file without the timestamp in order to proceed."
            continue
        fi

        echo -e "Sandy: $latest_file_base has been added to the $(basename $d) audio profile conversion directory ..."
        echo -e "\nSandy: So, I'm going to encode it now."

        # File folder organizer
        foldername=$(date +"%Y/%m/%d")

        # Move the original file outside of the profile folder
        mv "$d/$latest_file_base" "$audio_dir/$latest_file_base"

        ## DEFAULT PROFILE : Profile values are ignored if p_custom_string is not ""
        p_custom_string=""
        p_a_codec="libmp3lame"
        p_a_rate="44100"
        p_a_channels="2"
        p_quality="3"
        p_bitrate="192k"
        p_format="mp3"
        p_fileext="mp3"
        p_jointstereo="1"

        echo "Sandy: I am encoding the file $latest_file_base to $d/$original_fn-$uid.$p_fileext ... "

        # Import ffmpeg profile variables for this folder
        if [ -f "$d/.profile" ]; then
            source "$d/.profile"
            export $(cut -d= -f1 "$d/.profile")
        else
            echo "Sandy: No .profile file was found for $d, so I'm using my defaults."
        fi

        outputfilename="$original_fn-$uid.$p_fileext"
        outputfileurl=`rawurlencode "$outputfilename"`
        outputfile="$d/$outputfileurl"

        ## Concatenated string of all of our profile settings
        ffmpeg_string="-joint_stereo $p_jointstereo -acodec $p_a_codec -vn -ar $p_a_rate -ac $p_a_channels -b:a $p_bitrate -q:a $p_quality -f $p_format"  

        # Convert file in working/profile directory
        if [ -z "$p_custom_string+x" ] || [ "$p_custom_string" == "0" ]; then
            /usr/local/bin/ffmpeg -y -i "$audio_dir/$latest_file_base" $ffmpeg_string "$outputfile" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt
        else
            eval /usr/local/bin/ffmpeg -y -i "$audio_dir/$latest_file_base" $p_custom_string "$outputfile" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt
        fi   

        # Log the profile conversion activity
        echo -e "Sandy: $outputfile has completed conversion and has been logged.\n" 
        echo -e "$outputfile" >> "$LOG_LOC/profile-audio-$uid-conversions-log.txt"
    done
done
exit 0