#!/bin/bash
#
# Description: Takes a raw folder mp4 file and converts it to different 
#  stream-ready bitrates using conversion profile folders
#
raw_dir_v="$1"
media_dir="$2"
profile_dir="$3"

if [ ! -d $raw_dir_v ]; 
    then
      echo "Sandy: Please pass me the directory where raw .mp4 files are stored."
      echo "exited with error"
      exit 1
fi

if [ ! -d $media_dir ]; 
    then
      echo "Sandy: Please pass me a directory where converted files will be stored."
      echo "exited with error"
      exit 1
fi

if [ ! -d $media_dir ]; 
    then
      echo "Sandy: Please pass me a profile directory to use for conversion."
      echo "exited with error"
      exit 1
fi

parentdir="$(dirname $raw_dir_v)"

# Wait until raw video directory receives a new file
inotifywait -qmre close_write --format "%w%f" "$raw_dir_v" | while read filename; 
do
    latest_stream_base=$(basename $filename)

    # Ensure that we are converting an .mp4 file
    if [ ! ${filename: -4} == ".mp4" ]; then
        echo "Sandy: What magic do you believe me capable of performing, here?"
        echo "Sandy: The most recent raw file added was not an .mp4"
        echo "exited with error"
        exit 1
    fi

    # Generate filename before .mp4
    mp4fn=$(echo $latest_stream_base | cut -f 1 -d '.')
    stringcreated=$(echo $mp4fn | cut -f 2 -d '_')

    # Ensure that the file contains a valid timestamp
    val_date=$(date -d @$stringcreated)
    if [ -z "$val_date" ] || [ "$val_date" == "" ]; then
        echo "Sandy: This file will not be converted."
        echo "Sandy: It needs to end in '-[UNIX_DATE]' format to continue."
        echo "exited with error"
        exit 1
    fi

    # File folder organizer
    foldername=$(date --date @$stringcreated +"%Y/%m/%d")

    # Loop through each profile directory and use as a working directory
    #  Then output to the appropriate media vod folder
    for d in $parentdir/*; do

        # Profile directory name
        profile=$(basename $d)

        # Leave if we're not in a dir or if we're in the raw directory
        if [ ! -d "$d" ] || [ "$profile" == "raw" ]; then
            continue
        fi

        # Also, leave if the file added contains the profile name, because those are
        #  considered completed jobs
        if [ "$latest_stream_base" == *"$profile"* ]; then
            continue
        fi   
        
        ## DEFAULT PROFILE
        p_custom_string=""
        p_demux="0"
        p_v_codec="copy"
        p_a_codec="copy"
        p_size_width="1280"
        p_size_height="720"
        p_filter=""
        p_crf="18"
        p_preset="ultrafast"
        p_maxrate="1000k"
        p_bufsize="1500k"
        p_a_bitrate="192k"
        p_g="60"
        p_tune="fastdecode"
        p_format="mp4"
        p_fileext="mp4"
        # NOT REQUIRED : set p_thumb_gen to "0" in .profile to ignore thumbnail generation
        p_thumb_gen="1"
        p_thumb_height="250"
        p_thumb_rows="1"
        p_thumb_cols="30"

        # Import ffmpeg profile variables for this folder
        if [ -f "$d/.profile" ]; then
            source "$d/.profile"
            export $(cut -d= -f1 "$d/.profile")
        else
            echo "Sandy: No .profile file was found for $d, so I'm using my defaults."
        fi

        # Including empty filter will break ffmpeg conversion,
        #  So, we include a rescaler to the entire argument or none at all
        if [ -z "$p_filter+x" ] || [ "$p_filter" == "" ]; then
            # Implements $p_size_width and $p_size_height to set dimension format
             p_filter="scale=iw*min($p_size_width/iw\,$p_size_height/ih):ih*min($p_size_width/iw\,$p_size_height/ih), pad=$p_size_width:$p_size_height:($p_size_width-iw*min($p_size_width/iw\,$p_size_height/ih))/2:($p_size_height-ih*min($p_size_width/iw\,$p_size_height/ih))/2"
        fi

        ## Profile not always required, so we truncate if not used
        if [ -z "$p_v_profile+x" ] || [ "$p_v_profile" == "" ]; then
            p_v_profile=""
        else
            p_v_profile=" -profile:v $p_v_profile "
        fi

        ## Preset not always required, so we truncate if not used
        if [ -z "$p_preset+x" ] || [ "$p_preset" == "" ]; then
            p_preset=""
        else
            p_preset=" -preset $p_preset "
        fi

        save_loc="$media_dir/video/live/$profile/$foldername/$mp4fn"
        outputfile="$save_loc/index.$p_fileext"

        sudo mkdir -p "$save_loc"
        
        # Copy in metadata 
        /usr/local/bin/ffmpeg -y -i $filename -f ffmetadata "$save_loc/$mp4fn-input-metadata.txt"

        # Copy in info
        /usr/local/bin/ffprobe -show_format -show_streams $filename > "$save_loc/$mp4fn-input-info.txt"
        
        ## Concatenated string of all of our profile settings
        ffmpeg_string=" -vcodec $p_v_codec -tune $p_tune -acodec $p_a_codec -b:a $p_a_bitrate -vf $p_filter -crf $p_crf$p_v_profile$p_preset-maxrate $p_maxrate -bufsize $p_bufsize -g $p_g -f $p_format"      

        ffmpeg_queue > /dev/null

        echo "Sandy: I am encoding the raw $latest_stream_base to $outputfile ... "

        if [ "$p_demux" == "0" ]; then
            # Convert file in working/profile directory
            if [ "$p_custom_string" == "" ]; then 
                /usr/local/bin/ffmpeg -y -i $filename $ffmpeg_string "$d/$mp4fn-$profile.$p_fileext" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt &&  echo "$outputfile | " >> "$LOG_LOC/profile-video-$profile-conversions-log.txt" &&
                # Copy completed file to media directory
                mv "$d/$mp4fn-$profile.$p_fileext" "$outputfile"
            else
                /usr/local/bin/ffmpeg -y -i $filename $p_custom_string "$d/$mp4fn-$profile.$p_fileext" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt && echo "$outputfile | " >> "$LOG_LOC/profile-video-$profile-conversions-log.txt" &&
                # Copy completed file to media directory
                mv "$d/$mp4fn-$profile.$p_fileext" "$outputfile"
            fi
        else
            # Create location to store audio
            mkdir -p "$media_dir/audio/live/$profile/$foldername"
            $save_loc_a="$media_dir/audio/live/$profile/$foldername"
            # Copy demuxed audio into the audio folder
            if [ "$p_custom_string" == "" ]; then
                /usr/local/bin/ffmpeg -y -i $filename -vn -acodec "$p_a_codec" -b:a "$p_a_bitrate" "$save_loc_a/$mp4fn.aac"
                /usr/local/bin/ffmpeg -y -i $filename $ffmpeg_string "$d/$mp4fn-$profile.$p_fileext" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt && echo "$outputfile | " >> "$LOG_LOC/profile-video-$profile-conversions-log.txt"  &&
                mv "$d/$mp4fn-$profile.$p_fileext" "$outputfile"
            else
                /usr/local/bin/ffmpeg -y -i $filename -vn -acodec "$p_a_codec" -b:a "$p_a_bitrate" "$media_dir/audio/live/$profile/$foldername/$mp4fn.aac"
                eval /usr/local/bin/ffmpeg -y -i $filename -an $p_custom_string "$d/$mp4fn-$profile.$p_fileext" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_audio_$uid-log.txt && echo "$outputfile | " >> "/$LOG_LOC/profile-video-$profile-conversions-log.txt" &&
                mv "$d/$mp4fn-$profile.$p_fileext" "$outputfile"
            fi
        fi

        inotifywait -qre close_write --format "%w%f" "$save_loc" | while read filename; do  
            echo "Sandy: $outputfile has initiated conversion and has been logged."
            # Copy out metadata
            /usr/local/bin/ffmpeg -y -i "$filename" -f ffmetadata "$save_loc/$mp4fn-output-metadata.txt" 

            # Copy out info
            /usr/local/bin/ffprobe -show_format -show_streams "$filename" > "$save_loc/$mp4fn-output-info.txt"

             if [ ! "$p_thumb_gen" == "0" ]; then
                # Create preview image and dump converted file to the capture gallery folder
                #   thumbnail generator args: VIDEO [HEIGHT=120] [COLS=100] [ROWS=1] [OUTPUT]
                mkdir -p "/vagrant/cap_gal/$foldername"
                /vagrant/bistorm/xndir/thumbnail_generator "$filename" "$p_thumb_height" "$p_thumb_cols" "$p_thumb_rows" "/vagrant/cap_gal/$foldername/$mp4fn.jpg" >> $LOG_LOC/thumbnail-generator-log.txt &&
                sudo cp "/vagrant/cap_gal/$foldername/$mp4fn.jpg" "$save_loc/$mp4fn.jpg" 
            fi
        done
    done
done