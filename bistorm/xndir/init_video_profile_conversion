#!/bin/bash
#
# Description: Initiates a conversion of a file that is moved into a profile working directory.
#  Because virtualbox and shared nfs folders don't allow for listening to write
#  changes from just the host machine, this task is run through cron
#

exit

video_dir="$1"

if [ ! -d "$video_dir" ]; 
    then
     echo "Sandy: Please pass me the directory where video profile working folders are stored."
     echo "exited with error"
     exit 1
fi

source /vagrant/bistorm/vars/log_loc

rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

for d in $video_dir/*; do

    # Only process in the profile directory where video files are stored
    if [ ! -d "$d" ]  || [ "$(basename $d)" == "raw" ]; then
        continue
    fi

    # Get the latest file to be converted
    ## Make file extension listing easier to read
    acc_files=()
    for f in $d/*; do
        filename=`basename "$f"`
        f_lower="$(echo $filename | tr [A-Z] [a-z])"
        # Do not check files that contain the profile name
        if [[ ! -f $f ]] || [[ "$filename" == *"$(basename $d)"* ]]; then
            continue
        fi

        if [[ ${f_lower: -4} == ".mp4" ]] || [[ ${f_lower: -4} == ".flv" ]] || [[ ${f_lower: -4} == ".mpeg" ]] || \
            [[ ${f_lower: -4} == ".mp4" ]] || [[ ${f_lower: -4} == ".mkv" ]] || [[ ${f_lower: -4} == ".avi" ]] || \
            [[ ${f_lower: -4} == ".mts" ]] || [[ ${f_lower: -4} == ".m4v" ]] || [[ ${f_lower: -4} == ".mp5" ]] || [[ ${f_lower: -3} == ".ts" ]]; then
            acc_files+=("$filename")
        fi
    done

    # If there are no convertible files in this directory, move to the next one
    if [ -z ${acc_files[0]} ]; then
        continue 
    fi;

    for i in "${acc_files[@]}"; do     
        latest_file_base=$i
        uid=$(basename $d)

        # Generate filename before extension
        original_fn="$(echo $latest_file_base | cut -f 1 -d '.')"

        # Ensure that the file does NOT contain a LIVE timestamp
        stringcreated=$(echo $original_fn | cut -f 2 -d '-')
        datecreated=$(date --d @$stringcreated +"%D")
        val_date=$(date -d $datecreated)
        if [ ! -z "$val_date" ] || [ ! "$val_date" == "" ]; then
            echo "Sandy: $latest_file_base will NOT be converted."
            echo -e "\n Sandy: It ends in '-[UNIX_DATE]' format, which I assume is a LIVE file."
            echo -e "\n Sandy: Please rename the file without the timestamp in order to proceed."
            continue
        fi

        echo -e "Sandy: $latest_file_base has been added to the $(basename $d) video profile conversion directory ..."
        echo -e "\nSandy: So, I'm going to encode it now."

        # File folder organizer
        foldername=$(date +"%Y/%m/%d")

        # Move the original file outside of the profile folder
        mv "$d/$latest_file_base" "$video_dir/$latest_file_base"

        ## DEFAULT PROFILE : Profile values are ignored if p_custom_string is not ""
        p_custom_string=""
        p_demux="0"
        p_v_codec="copy"
        p_a_codec="copy"
        p_size_width="1280"
        p_size_height="720"
        p_filter=""
        p_crf="18"
        p_preset="ultrafast"
        p_maxrate="2500k"
        p_bufsize="5000k"
        p_a_bitrate="192k"
        p_g="60"
        p_v_profile="baseline"
        p_format="mp4"
        p_fileext="mp4"
        # NOT REQUIRED : set p_thumb_gen to "0" in .profile to ignore thumbnail generation
        p_thumb_gen="1"
        p_thumb_height="250"
        p_thumb_rows="1"
        p_thumb_cols="100"

        echo "Sandy: I am encoding the file $latest_file_base to $d/$original_fn-$uid.$p_fileext ... "

        # Import ffmpeg profile variables for this folder
        if [ -f "$d/.profile" ]; then
            source "$d/.profile"
            export $(cut -d= -f1 "$d/.profile")
        else
            echo "Sandy: No .profile file was found for $d, so I'm using my defaults."
        fi

        outputfilename="$original_fn-$uid.$p_fileext"
        outputfileurl=`rawurlencode "$outputfilename"`
        outputfile="$d/$outputfileurl"

        # Including empty filter will break ffmpeg conversion,
        #  So, we include a rescaler to the entire argument or none at all
        if [ -z "$p_filter+x" ] || [ "$p_filter" == "" ]; then
             p_filter="scale=iw*min($p_size_width/iw\,$p_size_height/ih):ih*min($p_size_width/iw\,$p_size_height/ih), pad=$p_size_width:$p_size_height:($p_size_width-iw*min($p_size_width/iw\,$p_size_height/ih))/2:($p_size_height-ih*min($p_size_width/iw\,$p_size_height/ih))/2"
        fi

        ## Profile not always required, so we truncate if not used
        if [ -z "$p_v_profile+x" ] || [ "$p_v_profile" == "" ]; then
            p_v_profile=""
        else
            p_v_profile=" -profile:v $p_v_profile"
        fi

        ## Preset not always required, so we truncate if not used
        if [ -z "$p_preset+x" ] || [ "$p_preset" == "" ]; then
            p_preset=""
        else
            p_preset=" -preset $p_preset"
        fi

        # Copy metadata 
        /usr/local/bin/ffmpeg -y -i "$video_dir/$latest_file_base" -f ffmetadata "$d/$latest_file_base-input-$uid-metadata.txt"

        # Copy show info
        /usr/local/bin/ffprobe -show_format -show_streams "$video_dir/$latest_file_base" > "$d/$latest_file_base-input-$uid-info.txt"

        ## Concatenated string of all of our profile settings
        ffmpeg_string=" -vcodec $p_v_codec -tune $p_tune -acodec $p_a_codec -b:a $p_a_bitrate -vf $p_filter -crf $p_crf$p_v_profile$p_preset-maxrate $p_maxrate -bufsize $p_bufsize -g $p_g -f $p_format"  

        ffmpeg_queue > /dev/null

        if [ -z "$p_demux+x" ] || [ "$p_demux" == "0" ]; then
            # Convert file in working/profile directory
            if [ "$p_custom_string" == "" ]; then
                /usr/local/bin/ffmpeg -y -i "$video_dir/$latest_file_base" "$ffmpeg_string" "$outputfile" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_video_$uid-log.txt
            else
                eval /usr/local/bin/ffmpeg -y -i "$video_dir/$latest_file_base" "$p_custom_string" "$outputfile" > /tmp/ffmpeg 2>/tmp/ffmpeg 2>$LOG_LOC/ffmpeg_video_$uid-log.txt
            fi   
        else 
            # Create demuxed directories in working directory
            mkdir -p "$d/audio"
            # Copy into the audio and video folders
            if [ "$p_custom_string" == "" ]; then 
                /usr/local/bin/ffmpeg -y -vn -i "$video_dir/$latest_file_base" -acodec "$p_a_codec" -b:a "$p_a_bitrate" "$d/audio/$original_fn-$uid.aac" 
                /usr/local/bin/ffmpeg -y -i "$video_dir/$latest_file_base" $ffmpeg_string "$output_file" > /tmp/ffmpeg 2>/tmp/ffmpeg 2>$LOG_LOC/ffmpeg_video_$uid-log.txt
            else  
                /usr/local/bin/ffmpeg -y -vn -i "$video_dir/$latest_file_base" -acodec "$p_a_codec" -b:a "$p_a_bitrate" "$d/audio/$original_fn-$uid.aac" 
                eval /usr/local/bin/ffmpeg -y -i "$video_dir/$latest_file_base" -an $p_custom_string "$outputfile" > /tmp/ffmpeg 2>$LOG_LOC/ffmpeg_video_$uid-log.txt
            fi
        fi

        if [ -f "$outputfile" ]; then

            if [ ! "$p_thumb_gen" == "0" ]; then
                # Create preview image and dump converted file to the capture gallery folder
                #   thumbnail generator args: VIDEO [HEIGHT=120] [COLS=100] [ROWS=1] [OUTPUT]
                mkdir -p "/vagrant/cap_gal/$foldername"
                /vagrant/bistorm/xndir/thumbnail_generator "$outputfile" "$p_thumb_height" "$p_thumb_cols" "$p_thumb_rows" "/vagrant/cap_gal/$foldername/$original_fn.jpg" >> $LOG_LOC/thumbnail_generator-log.txt
                cp "/vagrant/cap_gal/$foldername/$original_fn-$uid.jpg" "$d/"
            fi

            # Log the profile conversion activity
            echo -e "Sandy: $outputfile has initiated conversion and has been logged.\n" 
            echo -e "$outputfile\n" >> "$LOG_LOC/profile-video-$uid-conversions-log.txt"

        fi
    done
done
exit 0