#!/bin/bash
#
# Description: Initiates a conversion of a file that is moved into a profile working directory.
#  Because virtualbox and shared nfs folders don't allow for listening to write
#  changes from just the host machine, this task is run through cron
#

video_dir="$1"

if [ ! -d "$video_dir" ]; 
    then
     echo "Sandy: Please pass me the directory where video profile working folders are stored."
     echo "exited with error"
     exit 1
fi

for d in $video_dir/*; do

    # Only process in the profile directory where video files are stored
    if [ ! -d "$d" ]  || [ "$(basename $d)" == "raw" ]; then
        continue
    fi

    # Get the latest file to be converted
    ## Make file extension listing easier to read
    acc_files=()
    for f in $d/*; do
        # Do not check files that contain the profile name
        if [[ ! -f $f ]] || [[ "$(basename $f)" == *"$(basename $d)"* ]]; then
            continue
        fi
        f_base="$(basename $f)"

        thl_format=${f_base: -4}
        tl_format=${f_base: -3}
        thl_format=${thl_format,,}
        tl_format=${tl_format,,}

        if [[ $thl_format == ".mov" ]] || [[ $thl_format == ".flv" ]] || [[ $thl_format == ".mpeg" ]] || \
            [[ $thl_format == ".mp4" ]] || [[ $thl_format == ".mkv" ]] || [[ $thl_format == ".avi" ]] || \
            [[ $thl_format == ".mts" ]] || [[ $thl_format == ".m4v" ]] || [[ $thl_format == ".mp5" ]] || [[ $tl_format == ".ts" ]]; then
            file_base="$(basename $f)"
            acc_files+=($file_base)
        fi
    done

    # If there are no convertible files in this directory, move to the next one
    if [ -z ${acc_files[0]} ]; then
        continue 
    fi;

    for i in "${acc_files[@]}"; do     
        latest_file_base=$i
        uid=$(basename $d)

        # Generate filename before extension
        original_fn="$(echo $latest_file_base | cut -f 1 -d '.')"

        # Ensure that the file does NOT contain a LIVE timestamp
        stringcreated=$(echo $original_fn | cut -f 2 -d '-')
        datecreated=$(date --d @$stringcreated +"%D")
        val_date=$(date -d $datecreated)
        if [ ! -z "$val_date" ] || [ ! "$val_date" == "" ]; then
            echo "Sandy: $latest_file_base will NOT be converted."
            echo -e "\n Sandy: It ends in '-[UNIX_DATE]' format, which I assume is a LIVE file."
            echo -e "\n Sandy: Please rename the file without the timestamp in order to proceed."
            continue
        fi

        echo -e "Sandy: $latest_file_base has been added to the $(basename $d) video profile conversion directory ..."
        echo -e "\nSandy: So, I'm going to encode it now."

        # File folder organizer
        foldername=$(date +"%Y/%m/%d") 

        # Create preview image and dump converted file to the capture gallery folder
        #   thumbnail generator args: VIDEO [HEIGHT=120] [COLS=100] [ROWS=1] [OUTPUT]
        #mkdir -p "/vagrant/cap_gal/$(basename $d)/$foldername"
        #/vagrant/bistorm/convert/thumbnail_generator "$d/$latest_file_base" 500 8 6 "/vagrant/cap_gal/$uid/$foldername/$original_fn-$uid.jpg" 2>> /vagrant/logs/thumbnail_generator-log.txt

        # Conversion process: By default, do not demux to separate audio file
        p_demux=0

        ## DEFAULT PROFILE
        p_custom_string=""
        p_demux="0"
        p_vcodec="copy"
        p_acodec="copy"
        p_size_width="1280"
        p_size_height="720"
        p_filter=""
        p_crf="18"
        p_preset="ultrafast"
        p_maxrate="2500k"
        p_bufsize="5000k"
        p_g="60"
        p_profile="baseline"
        p_format="mp4"
        p_fileext="mp4"

        echo "Sandy: I am encoding the file $latest_file_base to $d/$original_fn-$uid.$p_fileext ... "

        # Import ffmpeg profile variables for this folder
        if [ -f "$d/.profile" ]; then
            source "$d/.profile"
            export $(cut -d= -f1 "$d/.profile")
        else
            echo "Sandy: No .profile file was found for $d, so I'm using my defaults."
        fi

        # Including empty filter will break ffmpeg conversion,
        #  So, we include a rescaler to the entire argument or none at all
        if [ -z "$p_filter+x" ] || [ "$p_filter" == "" ]; then
             p_filter="scale=iw*min($p_size_width/iw\,$p_size_height/ih):ih*min($p_size_width/iw\,$p_size_height/ih), pad=$p_size_width:$p_size_height:($p_size_width-iw*min($p_size_width/iw\,$p_size_height/ih))/2:($p_size_height-ih*min($p_size_width/iw\,$p_size_height/ih))/2"
        fi

        if [ "$p_demux" == "0" ]; then
            # Convert file in working/profile directory
            if [ "$p_custom_string" == "" ]; then 
                ffmpeg -i "$d/$latest_file_base" -vcodec "$p_vcodec" -acodec "$p_acodec" -vf "$p_filter" -crf "$p_crf" -profile:v "$p_profile" -preset "$p_preset" -maxrate "$p_maxrate" -bufsize "$p_bufsize" -g "$p_g" -f "$p_format" "$d/$original_fn-$uid.$p_fileext" > /vagrant/logs/init-video-profile-conversion-ffmpeg-log.txt 
            else
                ffmpeg -i "$d/$latest_file_base" "$p_custom_string" "$d/$original_fn-$uid.$p_fileext" > /vagrant/logs/init-video-profile-conversion-ffmpeg-log.txt 
            fi   
        else 
            # Create demuxed directories in working directory
            mkdir -p "$d/video"
            mkdir -p "$d/audio"

            # Copy into the audio and video folders
            if [ "$p_custom_string" == "" ]; then 
                ffmpeg -i "$d/$latest_file_base" -vn -acodec copy "$d/audio/$original_fn-$uid.aac" &&
                    -vcodec "$p_vcodec" -an -vf "$p_filter" -crf "$p_crf" -profile:v "$p_profile" -preset "$p_preset" -maxrate "$p_maxrate" -bufsize "$p_bufsize" -g "$p_g" -f "$p_format" "$d/$original_fn-$uid.$p_fileext" > /vagrant/logs/init-video-profile-conversion-ffmpeg-log.txt 
            else
                ffmpeg -i "$d/$latest_file_base" -vn -acodec copy "$d/audio/$original_fn-$uid.aac" &&
                -an "$p_custom_string" "$d/video/$original_fn-$uid.$p_fileext" > /vagrant/logs/init-video-profile-conversion-ffmpeg-log.txt
            fi
        fi

        # Copy thumbnail to the profile directory
        #cp "/vagrant/cap_gal/$foldername/$original_fn-$uid.jpg" "$d/"

        # Log the profile conversion activity
        echo "Sandy: $d/$original_fn-$uid.$p_fileext has completed converting and has been logged." 
        echo "$d/$original_fn-$uid.$p_fileext" >> "/vagrant/logs/profile-$uid-conversions-log.txt"
    done
done
exit 0